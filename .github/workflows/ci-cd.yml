name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'
  KUBERNETES_VERSION: '1.28'
  DOCKER_REGISTRY: 'gcr.io'
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}

jobs:
  # Static Analysis and Code Quality
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Go tools
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run go vet
        run: |
          cd sample-app
          go vet ./...

      - name: Run go fmt check
        run: |
          cd sample-app
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Run 'gofmt -s -w .'"
            gofmt -s -l .
            exit 1
          fi

      - name: Run goimports check
        run: |
          cd sample-app
          if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
            echo "Imports are not formatted. Run 'goimports -w .'"
            goimports -l .
            exit 1
          fi

      - name: Run staticcheck
        run: |
          cd sample-app
          staticcheck ./...

      - name: Run golangci-lint
        run: |
          cd sample-app
          golangci-lint run --timeout=5m

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run unit tests
        run: |
          cd sample-app
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Generate coverage report
        run: |
          cd sample-app
          go tool cover -html=coverage.out -o coverage.html
          go tool cover -func=coverage.out

      - name: Check coverage requirements
        run: |
          cd sample-app
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
            echo "‚úÖ Coverage meets minimum requirement (70%)"
            if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
              echo "üéâ Coverage meets target requirement (80%)"
            else
              echo "‚ö†Ô∏è  Coverage below target (80%) but above minimum (70%)"
            fi
          else
            echo "‚ùå Coverage below minimum requirement (70%)"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./sample-app/coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: |
            sample-app/coverage.out
            sample-app/coverage.html

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run integration tests
        run: |
          cd sample-app
          go test -v -race -run Integration ./...

  # Benchmark Tests
  benchmark-tests:
    name: Benchmark Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run benchmarks
        run: |
          cd sample-app
          go test -v -bench=. -benchmem ./...

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: sample-app/benchmark.out

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: static-analysis
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./sample-app/...'

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec.sarif

  # Build and Test
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, benchmark-tests, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build application
        run: |
          cd sample-app
          go build -v -ldflags="-s -w" -o sample-app .

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sample-app-binary
          path: sample-app/sample-app

  # Docker Build
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Google Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}/sample-app
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./sample-app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Kubernetes Deployment
  k8s-deploy:
    name: Kubernetes Deployment
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} --zone ${{ secrets.GKE_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Kubernetes
        run: |
          # Update image tag in deployment files
          sed -i "s|image: .*|image: ${{ env.DOCKER_REGISTRY }}/${{ env.PROJECT_ID }}/sample-app:${{ github.sha }}|g" sample-app/k8s/production/*.yaml
          
          # Apply production deployment
          kubectl apply -f sample-app/k8s/production/
          
          # Wait for deployment to be ready
          kubectl rollout status deployment/sample-app-backend -n production
          kubectl rollout status deployment/sample-app-frontend -n production

      - name: Run smoke tests
        run: |
          # Get service endpoints
          BACKEND_IP=$(kubectl get service sample-app-backend -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          FRONTEND_IP=$(kubectl get service sample-app-frontend -n production -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Wait for services to be ready
          sleep 30
          
          # Test backend
          curl -f http://$BACKEND_IP:8080/healthz || exit 1
          curl -f http://$BACKEND_IP:8080/version || exit 1
          
          # Test frontend
          curl -f http://$FRONTEND_IP:8080/ || exit 1

  # Comprehensive Test Suite
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, benchmark-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run comprehensive test suite
        run: |
          python3 test_comprehensive.py --project-root . --output test_results.json --report test_report.md

      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: comprehensive-test-results
          path: |
            test_results.json
            test_report.md
            sample-app/coverage.html

  # Notification
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [comprehensive-tests, k8s-deploy]
    if: always()
    steps:
      - name: Notify on success
        if: needs.comprehensive-tests.result == 'success' && needs.k8s-deploy.result == 'success'
        run: |
          echo "‚úÖ All tests passed and deployment successful!"

      - name: Notify on failure
        if: needs.comprehensive-tests.result == 'failure' || needs.k8s-deploy.result == 'failure'
        run: |
          echo "‚ùå Tests failed or deployment failed!"
          exit 1
