name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, canary, develop ]
  pull_request:
    branches: [ master, main, canary ]
  workflow_dispatch:

env:
  GO_VERSION: '1.20'
  COVERAGE_THRESHOLD: 90

jobs:
  # Static analysis and linting
  lint:
    name: Lint and Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run go fmt
        run: |
          cd sample-app
          gofmt -l . | tee /tmp/gofmt.out
          test ! -s /tmp/gofmt.out || (echo "Please run gofmt" && exit 1)

      - name: Run go vet
        run: |
          cd sample-app
          go vet ./...

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

      - name: Run golangci-lint
        run: |
          cd sample-app
          $(go env GOPATH)/bin/golangci-lint run --timeout=5m

      - name: Check go.mod tidiness
        run: |
          cd sample-app
          go mod tidy
          git diff --exit-code go.mod go.sum

  # Unit tests
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          cd sample-app
          go mod download

      - name: Run unit tests
        run: |
          cd sample-app
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Check coverage threshold
        run: |
          cd sample-app
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Total coverage: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
            exit 1
          fi

      - name: Generate coverage HTML report
        run: |
          cd sample-app
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: sample-app/coverage.html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./sample-app/coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run integration tests
        run: |
          cd sample-app
          go test -v -tags=integration -timeout=30s ./...

  # Benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run benchmarks
        run: |
          cd sample-app
          go test -bench=. -benchmem -benchtime=3s ./... | tee benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: sample-app/benchmark.txt

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run gosec security scanner
        uses: securego/gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./sample-app/...'

  # Build Docker image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cd sample-app
          if [ -f Dockerfile ]; then
            docker build -t gceme:${{ github.sha }} .
          else
            echo "No Dockerfile found, skipping Docker build"
          fi

      - name: Save Docker image
        run: |
          cd sample-app
          if docker images | grep -q gceme; then
            docker save gceme:${{ github.sha }} -o gceme-image.tar
          fi

      - name: Upload Docker image artifact
        if: hashFiles('sample-app/gceme-image.tar') != ''
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: sample-app/gceme-image.tar
          retention-days: 1

  # Python test orchestration
  test-orchestration:
    name: Run Test Orchestration Script
    runs-on: ubuntu-latest
    needs: [test, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Run comprehensive test script
        run: |
          python3 test_comprehensive.py --all --verbose

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: test-reports/

  # Report results
  report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [test, integration, benchmark]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Display structure
        run: ls -R

      - name: Create summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… All tests completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "- Benchmark Results" >> $GITHUB_STEP_SUMMARY
          echo "- Test Reports" >> $GITHUB_STEP_SUMMARY
