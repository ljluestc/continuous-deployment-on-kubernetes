# Pre-commit hooks configuration for gceme application
# Install: pip install pre-commit
# Setup: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Go formatting
  - repo: https://github.com/dnephin/pre-commit-golang
    rev: v0.5.1
    hooks:
      - id: go-fmt
        name: Format Go code
        description: Runs gofmt to format Go code

      - id: go-vet
        name: Run go vet
        description: Runs go vet for static analysis

      - id: go-imports
        name: Run goimports
        description: Updates Go import lines

      - id: go-mod-tidy
        name: Tidy go.mod
        description: Ensures go.mod matches source code

  # Go unit tests
  - repo: local
    hooks:
      - id: go-unit-tests
        name: Run Go unit tests
        description: Runs all unit tests with race detection
        entry: bash -c 'cd sample-app && go test -race -short ./...'
        language: system
        pass_filenames: false
        files: \.go$

      - id: go-coverage-check
        name: Check test coverage
        description: Ensures test coverage meets minimum threshold
        entry: bash -c 'cd sample-app && go test -coverprofile=coverage.out ./... && go tool cover -func=coverage.out | grep total | awk "{if (\$3 < 90.0) {print \"Coverage below 90%: \" \$3; exit 1} else {print \"Coverage: \" \$3}}"'
        language: system
        pass_filenames: false
        files: \.go$

  # Go linting
  - repo: https://github.com/golangci/golangci-lint
    rev: v1.55.2
    hooks:
      - id: golangci-lint
        name: Run golangci-lint
        description: Fast linters runner for Go
        args: ['--timeout=5m']

  # Python formatting and linting
  - repo: https://github.com/psf/black
    rev: 23.12.0
    hooks:
      - id: black
        name: Format Python code
        language_version: python3

  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        name: Lint Python code
        args: ['--max-line-length=100', '--ignore=E203,W503']

  # YAML validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: check-yaml
        name: Check YAML syntax
        args: ['--safe']

      - id: check-json
        name: Check JSON syntax

      - id: check-merge-conflict
        name: Check for merge conflicts

      - id: check-added-large-files
        name: Check for large files
        args: ['--maxkb=1000']

      - id: trailing-whitespace
        name: Trim trailing whitespace

      - id: end-of-file-fixer
        name: Fix end of files

      - id: mixed-line-ending
        name: Fix mixed line endings

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        name: Detect secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: package.lock.json

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: Lint Dockerfiles

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        name: Lint Markdown files
        args: ['--fix']

# Configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
