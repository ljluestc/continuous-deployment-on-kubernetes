# Pre-commit hooks configuration
# Install: pip install pre-commit
# Setup: pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: ['--markdown-linebreak-ext=md']
      - id: end-of-file-fixer
      - id: check-yaml
        args: ['--unsafe']  # Allow custom tags in YAML
      - id: check-json
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: detect-private-key
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Go formatting
  - repo: https://github.com/dnephin/pre-commit-golang
    rev: v0.5.1
    hooks:
      - id: go-fmt
        name: Go Format
        description: Run gofmt to format Go code
      - id: go-vet
        name: Go Vet
        description: Run go vet to check Go code
      - id: go-lint
        name: Go Lint
        description: Run golint to lint Go code
      - id: go-mod-tidy
        name: Go Mod Tidy
        description: Run go mod tidy to clean up go.mod and go.sum
      - id: go-unit-tests
        name: Go Unit Tests
        description: Run Go unit tests
        args: ['-tags=unit', '-timeout=5m']

  # YAML linting
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.33.0
    hooks:
      - id: yamllint
        args: ['-d', '{extends: default, rules: {line-length: {max: 120}, document-start: disable}}']

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.38.0
    hooks:
      - id: markdownlint
        args: ['--fix']

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Python formatting (for test scripts)
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3.11

  # Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: ['--max-line-length=120', '--ignore=E203,W503']

  # Security checks for Go
  - repo: https://github.com/securego/gosec
    rev: v2.18.2
    hooks:
      - id: gosec
        args: ['-exclude-generated', './...']

  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker

  # Custom hook for running tests before commit
  - repo: local
    hooks:
      - id: go-test-coverage
        name: Go Test Coverage Check
        entry: bash -c 'for dir in $(find . -name "go.mod" -exec dirname {} \;); do cd $dir && go test -tags=unit -coverprofile=coverage.out ./... && coverage=$(go tool cover -func=coverage.out | grep total | awk "{print \$3}" | sed "s/%//"); if (( $(echo "$coverage < 80" | bc -l) )); then echo "Coverage $coverage% is below 80% in $dir"; exit 1; fi; cd -; done'
        language: system
        pass_filenames: false
        always_run: true

      - id: comprehensive-test
        name: Run Comprehensive Test Suite
        entry: python3 test_all_systems.py
        language: system
        pass_filenames: false
        stages: [push]

      - id: security-scan
        name: Security Vulnerability Scan
        entry: bash -c 'gosec -exclude-generated ./...'
        language: system
        pass_filenames: false
        stages: [push]

# Configuration
default_language_version:
  python: python3.11

fail_fast: false

# Skip certain hooks for specific files
exclude: |
  (?x)^(
    .*\.pb\.go$|
    .*_generated\.go$|
    vendor/.*|
    node_modules/.*|
    \.git/.*
  )$
